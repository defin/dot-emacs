* Prelude
#+begin_src emacs-lisp
(cond ((and (string= window-system "ns")
            (fboundp 'aquamacs-homepage))
       (defvar which-emacs 'aquamacs))
      ((string= window-system "ns")
       (defvar which-emacs 'emacs-app))
      ((string= window-system "x")
       (defvar which-emacs 'x))
      ((string= window-system "w32")
       (defvar which-emacs 'w32))
      ((eq window-system nil)
       (defvar which-emacs 'tty)))

(require 'cl)
#+end_src

* UI
** Solarized
#+begin_src emacs-lisp
;(load-theme 'solarized-light t)
;(load-theme 'solarized-dark t)
#+end_src
** Display
#+begin_src emacs-lisp
  (when (eq which-emacs 'emacs-app)
     (setq initial-frame-alist
           `((top . 22)
             (left . 0)
             (width . ,(- (floor (display-pixel-width) (frame-char-width)) 4))
             (height . ,(- (floor (- (display-pixel-height) 22) (frame-char-height)) 2))))

     (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
     (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (when (fboundp 'menu-bar-mode) (menu-bar-mode 1))

     (setq redisplay-dont-pause t)

     (setq ns-pop-up-frames nil))

  (when (eq which-emacs 'tty)
     (when (fboundp 'menu-bar-mode) (menu-bar-mode -1)))

  (column-number-mode 1)
  (size-indication-mode 1)
  (transient-mark-mode 1)


  (if (version< emacs-version "24.1")
      (setq tooltip-use-echo-area t) ; obsolete since 24.1
    (tooltip-mode -1))

  (setq visible-bell t)

  (setq minimap-window-location 'right)

(blink-cursor-mode 0)
(setq x-stretch-cursor t)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (require 'font-lock)
  (setq font-lock-maximum-decoration t)
  (global-font-lock-mode t)
#+end_src
** Keys
#+begin_src emacs-lisp
(when (eq which-emacs 'aquamacs)
  ; stop letting C-; switch meta to "Compose Character"
  (define-key osx-key-mode-map (kbd "C-;") '(lambda () (interactive)))
  ; stop letting A-q (Command-Q) kill aquamacs
  (define-key osx-key-mode-map (kbd "A-q") '(lambda () (interactive)))
  ; stop letting C-x C-c kill aquamacs
  (global-set-key (kbd "C-x C-c") '(lambda () (interactive)))
  ; use
  (global-set-key (kbd "<f12>") '(lambda () (interactive) (speedbar nil))))

(when (eq which-emacs 'emacs-app)
  ; stop letting s-q (Command-Q) kill emacs
  (global-set-key (kbd "s-q") '(lambda () (interactive))) ;[?\s-q]
  ; stop letting C-x C-c kill emacs
  (global-set-key (kbd "C-x C-c") '(lambda () (interactive))))

(setq next-line-add-newlines nil)
#+end_src

** IDO
#+begin_src emacs-lisp
(ido-mode 'buffers) ; 'both
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(setq ido-create-new-buffer 'always)

(require 'recentf)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)

;; enable recent files mode.
(recentf-mode t)

; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))
#+end_src
** Icomplete
#+begin_src emacs-lisp
(setq icomplete-mode t)
#+end_src

** Minibuffer
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode)
#+end_src
** Eliminate Annoying Prompts and Messages
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq confirm-nonexistent-file-or-buffer nil)
  (setq kill-buffer-query-functions (remq 'process-kill-buffer-query-function kill-buffer-query-functions))
  (setq revert-without-query '(".*"))

  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)
  (eval-after-load "startup" '(fset 'display-startup-echo-area-message (lambda ())))

  (put 'narrow-to-region 'disabled nil)
#+end_src

** Helpers
#+begin_src emacs-lisp
(defun duckduckgo-search (text)
  "Search DuckDuckGo from Emacs."
  (interactive "sSearch: ")
  (browse-url
   (concat "https://duckduckgo.com/?q="
           (replace-regexp-in-string " " "+" text))))
#+end_src
* Files & Paths
#+begin_src emacs-lisp
(push (expand-file-name "~/.emacs.d/src") load-path)
(filesets-init)
#+end_src
** Desktop
#+begin_src emacs-lisp
  (setq desktop-dirname "~/.emacs.d/")
  (desktop-save-mode 1)
  (setq desktop-save t)
#+end_src
** Packages
#+begin_src emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/"))
#+end_src
** Trash
#+begin_src emacs-lisp
;(setq delete-by-moving-to-trash t)
;(setq system-trash-exclude-matches '("#[^/]+#$" ".*~$" "\\.emacs\\.desktop.*"))
;(setq system-trash-exclude-paths '("/tmp"))
;(setq trash-directory ????)
#+end_src
** Dired
#+begin_src emacs-lisp
  (require 'dired-x)
  (require 'find-dired)
  (setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))
#+end_src
** Version Backups
#+begin_src emacs-lisp
  (setq version-control t
        kept-new-versions 16
        kept-old-versions 0
        delete-old-versions t
        backup-by-copying-when-linked t
        backup-by-copying t
        backup-directory-alist '(("." . "~/.emacs.d/backups")))

  (defun force-backup-of-buffer ()
    (setq buffer-backed-up nil))

  (add-hook 'before-save-hook  'force-backup-of-buffer)

  ;; delete files not accessed in a week
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (dolist (file (directory-files "~/.emacs.d/backups" t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (fifth (file-attributes file))))
                    week))
        (delete-file file))))

  (setq vc-make-backup-files t)
#+end_src

** Uniquify buffer names
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward)
  (setq uniquify-strip-common-suffix t)
  (setq uniquify-separator " ")
  (setq uniquify-trailing-separator-p t)
#+end_src
** Customize
#+begin_src emacs-lisp
;  (setq custom-file "~/.emacs.d/emacs-custom.el")
;  (load custom-file)
#+end_src

** Auto commit
#+begin_src emacs-lisp
  ;;; Auto commit
  (make-variable-buffer-local 'auto-commit)
  (setq auto-commit nil)
  (push (cons 'auto-commit t) safe-local-variable-values)

  (defun vc-auto-commit ()
    (interactive)
    (when auto-commit
      (let ((file (buffer-file-name)))
        (unless (vc-registered file)
          (vc-register))
        (vc-checkin (list file) (vc-backend file) nil "Auto Commit"))))

  (add-hook 'after-save-hook (lambda () (vc-auto-commit)))

  ;; * 17 * * * (cd /Users/dfinster/Code/s/vhub/org; hg push)

  ;;; VC config
  (require 'vc)
  (setq vc-handled-backends '(Hg Git SVN))
#+end_src

* Programming
** General
#+begin_src emacs-lisp
  (setq default-tab-width 8)
  (setq-default indent-tabs-mode nil)

  (defun delete-trailing-newlines ()
    (interactive)
    (save-restriction
      (widen)
      (save-excursion
        (if (and (> (point-max) (point-min))
                 (not find-file-literally))
            (while (or (= (char-after (1- (point-max))) ?\n)
                       (= (char-after (1- (point-max))) ?\r))
              (goto-char (point-max))
              (delete-backward-char 1))))))

  ;(add-hook 'before-save-hook
  ;          (lambda ()
  ;            (delete-trailing-whitespace)))

  (dolist (hook '(clojure-mode-hook
                  cider-repl-mode-hook
                  emacs-lisp-mode-hook
                  common-lisp-mode-hook
                  inferior-lisp-mode-hook
                  lisp-interaction-mode-hook
                  ielm-mode-hook
                  scheme-mode-hook))
    (add-hook hook
              (lambda ()
                (paredit-mode t))))


  ;(setq blink-matching-paren t)
  ;(setq blink-matching-paren-delay .3)

  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (setq show-paren-style 'parenthesis)

#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
#+end_src
** Common Lisp
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cl" . common-lisp-mode))

  (eval-after-load "slime"
    '(progn
      (add-to-list 'load-path "/Users/df/lib/slime")
      (slime-setup '(slime-fancy slime-banner))
      (setq slime-complete-symbol*-fancy t)
      (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
      (setq slime-net-coding-system 'utf-8-unix)))

  ;(setq inferior-lisp-program "/Users/df/lib/AllegroCL64-8/alisp")
  (setq inferior-lisp-program "/opt/local/bin/lisp") ; CMUCL
#+end_src

** Clojure
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.clj" . clojure-mode))
  ;(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (setq cider-lein-command "/opt/local/bin/lein")

  (setq nrepl-log-messages t)
  (setq nrepl-hide-special-buffers t)

  (setq cider-repl-result-prefix ";; => ")

  (setq cider-repl-wrap-history t)

  (setq cider-repl-history-size 10000)

  (setq cider-repl-history-file "~/.emacs.d/cider.history")

  (add-hook 'cider-repl-mode-hook 'subword-mode)

  (global-set-key (kbd "<f1>") 'clojure-cheatsheet)

  ;(add-hook 'cider-repl-mode-hook 'paredit-mode)

  (global-company-mode)

  ;(add-hook 'cider-repl-mode-hook 'company-mode)
  ;(add-hook 'cider-mode-hook 'company-mode)
#+end_src
** Python
#+begin_src emacs-lisp
  (setq python-indent-offset 4)

  (defun untabify-whole-buffer ()
    (save-restriction
      (widen)
      (untabify (point-min) (point-max))))

  (add-hook 'before-save-hook
            (lambda ()
              (if (eq major-mode 'python-mode)
                  (untabify-whole-buffer))))

;  (add-hook 'python-mode-hook 'jedi:setup)
;  (setq jedi:complete-on-dot t)
#+end_src

** Objective C
#+copied_from http://www.bretthutley.com/programming/emacs/integrating-emacs-and-xcode/
#+begin_src emacs-lisp
  (setq auto-mode-alist
       (cons '("\\.m$" . objc-mode) auto-mode-alist))
  (setq auto-mode-alist
      (cons '("\\.mm$" . objc-mode) auto-mode-alist))

  (setq auto-mode-alist
       (cons '("\\.h$" . bh-choose-header-mode) auto-mode-alist))

  (defun bh-choose-header-mode ()
    (interactive)
    (if (string-equal (substring (buffer-file-name) -2) ".h")
        (progn
          ;; OK, we got a .h file, if a .m file exists we'll assume it's
          ; an objective c file. Otherwise, we'll look for a .cpp file.
          (let ((dot-m-file (concat (substring (buffer-file-name) 0 -1) "m"))
                (dot-cpp-file (concat (substring (buffer-file-name) 0 -1) "cpp"))
                (dot-c-file (concat (substring (buffer-file-name) 0 -1) "c")))
            (cond ((file-exists-p dot-m-file)
                   (objc-mode))
                  ((file-exists-p dot-cpp-file)
                   (c++-mode))
                  ((file-exists-p dot-c-file)
                   (c-mode)))))))

  (add-hook 'find-file-hook 'bh-choose-header-mode)

  (defun bh-compile ()
    (interactive)
    (let ((df (directory-files "."))
          (has-proj-file nil))
      (while (and df (not has-proj-file))
        (let ((fn (car df)))
          (if (> (length fn) 10)
              (if (string-equal (substring fn -10) ".xcodeproj")
                  (setq has-proj-file t))))
        (setq df (cdr df)))
      (if has-proj-file
          (compile "xcodebuild -configuration Debug")
        (compile "make"))))

#+end_src

** JavaScript
#+begin_src emacs-lisp
  (push (expand-file-name "~/.emacs.d/src/js2-mode") load-path)
  (autoload 'js2-mode "js2-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
#+end_src

** HTML
#+begin_src emacs-lisp
  ; html-helper-mode sux, use xml-mode...
  (while (let ((e (rassoc 'html-helper-mode auto-mode-alist)))
           (when e
             (rplacd e 'xml-mode))))
#+end_src

** Magit
#+begin_src emacs-lisp
  (require 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)

  (require 'git-gutter-fringe)
;  (global-git-gutter-mode t)
  (setq git-gutter-fr:side 'right-fringe)
#+end_src
** SQLi
#+begin_src emacs-lisp
    (setq sql-connection-alist
          '((local (sql-product 'postgres)
                   (sql-port 5432)
                   (sql-server "localhost")
                   (sql-user "df")
  ;                (sql-password "password")
                   (sql-database "dedup"))))

    (defvar sql-servers-list
      '(("Local Server" local)))

    (defun db-connect (server)
      (interactive (helm-comp-read "Select server: " sql-servers-list))
      (setq sql-product 'postgres)
      (sql-connect server))

  (add-hook 'sql-interactive-mode-hook
            (lambda ()
              (toggle-truncate-lines t)))

  (setq sql-postgres-program "/Applications/Server.app/Contents/ServerRoot/usr/bin/psql")

#+end_src
** Tidy / Prettify Data
#+begin_src emacs-lisp
(defun tidyxml ()
  (interactive)
  (shell-command-on-region (point-min) (point-max) "xmllint --c14n - | XMLLINT_INDENT=$'\t' xmllint --format -" nil t))

(defun tidyjson ()
  (interactive)
  (shell-command-on-region (point-min) (point-max) "python -c 'import
  sys, json; print json.dumps(json.load(sys.stdin), sort_keys=True,
  indent=4)'" nil t))

(defun pretty-json ()
  (interactive)
  (tidyjson))

(defun pretty-xml ()
  (interactive)
  (tidyxml))
#+end_src

** Dash
#+begin_src emacs-lisp
  (global-set-key "\C-cD" 'dash-at-point)
  (global-set-key "\C-cd" 'dash-at-point-with-docset)
  (add-to-list 'dash-at-point-mode-alist '(perl-mode . "perl"))
#+end_src

** Helm
#+begin_src emacs-lisp
  (add-hook 'after-save-hook 'helm-backup-versioning)
#+end_src

* Org Mode
** Setup
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))

(setq org-directory "~/org")
(setq org-log-done t)

(setq org-agenda-files '("~/org"))

(setq org-use-fast-todo-selection t)

(setq org-completion-use-ido t)

(defun gtd ()
   (interactive)
   (find-file "~/org/gtd.org"))
#+end_src

** Keys
#+begin_src emacs-lisp
  (define-prefix-command 'org-custom-map)
  (global-set-key (kbd "M-`") 'org-custom-map)
  (global-set-key (kbd "M-` a") 'org-agenda)
  (global-set-key (kbd "M-` b") 'org-iswitchb)
  (global-set-key (kbd "M-` c") 'org-capture)
  (global-set-key (kbd "M-` d") 'org-decrypt-entry)
  (global-set-key (kbd "M-` e") 'org-encrypt-entry)
  (global-set-key (kbd "M-` g") 'org-mobile-pull)
  (global-set-key (kbd "M-` l") 'org-store-link)
  (global-set-key (kbd "M-` p") 'org-mobile-push)
  (global-set-key (kbd "M-` t") 'bh/org-todo)
  (global-set-key (kbd "M-` w") 'bh/widen)

  ;; Clocking
  (define-prefix-command 'org-custom-clock-map)
  (global-set-key (kbd "M-` M-c") 'org-custom-map)
  (global-set-key (kbd "M-` M-c i") 'bh/punch-in)
  (global-set-key (kbd "M-` M-c o") 'bh/punch-out)
  (global-set-key (kbd "M-` M-c SPC") 'bh/clock-in-last-task)
  (global-set-key (kbd "M-` M-c g") 'org-clock-goto)
  (global-set-key (kbd "M-` M-c n") 'org-clock-in)
#+end_src

** Org Capture
#+begin_src emacs-lisp
;(define-key mode-specific-map [?a] 'org-agenda)

(setq org-default-notes-file "~/org/notes.org")
(define-key global-map "\C-cc" 'org-capture)

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
             "* TODO %?\n  %i\n  \n%a\n%U\n")
        ("n" "Note" entry (file+datetree "~/org/notes.org")
             "* %?\nEntered on %U\n  %i\n  %a\n")))

(custom-set-variables
 '(org-agenda-files (quote ("~/org/todo.org" "~/org/money.org")))
 '(org-agenda-ndays 7)
 '(org-deadline-warning-days 14)
 '(org-agenda-show-all-dates t)
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-start-on-weekday nil)
 '(org-reverse-note-order t)
 '(org-fast-tag-selection-single-key (quote expert))
 '(org-agenda-custom-commands
   (quote (("d" todo "DELEGATED" nil)
           ("c" todo "DONE|DEFERRED|CANCELLED" nil)
           ("w" todo "WAITING" nil)
           ("W" agenda "" ((org-agenda-ndays 21)))
           ("A" agenda ""
            ((org-agenda-skip-function
              (lambda nil
                (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]")))
             (org-agenda-ndays 1)
             (org-agenda-overriding-header "Today's Priority #A tasks: ")))
           ("u" alltodo ""
            ((org-agenda-skip-function
              (lambda nil
                (org-agenda-skip-entry-if (quote scheduled) (quote deadline)
                                          (quote regexp) "\n]+>")))
             (org-agenda-overriding-header "Unscheduled TODO entries: ")))))))
#+end_src

** Org Speed
#+begin_src emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("h" . hide-other)
                                      ("k" . org-kill-note-or-show-branches)
;                                      ("q" . bh/show-org-agenda)
                                      ("r" . org-reveal)
                                      ("s" . org-save-all-org-buffers)
                                      ("z" . org-add-note)
;                                      ("c" . self-insert-command)
;                                      ("C" . self-insert-command)
                                      ("J" . org-clock-goto))))

#+end_src

** Org Babel
http://orgmode.org/worg/org-contrib/babel/intro.html
#+begin_src emacs-lisp
(setq org-ditaa-jar-path "~/.emacs.d/src/java/ditaa.jar")
(setq org-plantuml-jar-path "~/.emacs.d/src/java/plantuml.jar")

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

(org-babel-do-load-languages
  (quote org-babel-load-languages)
  (quote ((emacs-lisp . t)
          (dot . t)
          (ditaa . t)
          (R . t)
          (python . t)
          (ruby . nil)
          (gnuplot . t)
          (clojure . nil)
          (sh . t)
          (ledger . t)
          (org . t)
          (plantuml . t)
          (latex . t))))
#+end_src

** Org Protocol
#+begin_src emacs-lisp
; (setq server-socket-dir "/tmp/emacs501o")
  (server-start)
; (server-force-delete) to clear
  (require 'org-protocol)
#+end_src


** OrgMobile
#+begin_src emacs-lisp
  (setq org-mobile-inbox-for-pull "~/org/inbox.org")
  (setq org-mobile-directory "~/org/MobileOrg")
  (setq org-mobile-files '(org-agenda-files org-agenda-text-search-extra-files "~/org/"))
#+end_src
*** OrgMobile Mercurial
#+begin_src emacs-lisp
  ; add these lines into customize of mode-line-format
  ;(org-local-modified-p "|>")
  ;(org-mobile-modified-p "<|")

   (defadvice org-mobile-push (after mercurial-push last () activate)
     (interactive)
     (shell-command "cd ~/org;hg commit -m 'push';hg push")
     (org-mobile-check-modified-local))

   (defadvice org-mobile-pull (before mercurial-pull first () activate)
     (interactive)
     (shell-command "cd ~/org;hg pull;hg update"))

   (defadvice org-mobile-pull (after mercurial-pull-after last () activate)
     (interactive)
     (shell-command "cd ~/org;hg commit -m 'pull';hg push")
     (org-mobile-check-modified)
     (find-file "~/org/inbox.org"))

    (defvar org-mobile-modified-p nil)
    (defvar org-local-modified-p nil)

    (defun org-mobile-check-modified ()
      (let* ((buf (get-buffer-create "*hg-check*"))
             (proc (start-process-shell-command "ssh hg status" buf
                     "ssh -i ~/test.pem ubuntu@cloud-23.dyndns.org 'cd org;hg status';echo '@@'")))
        (set-process-filter proc (lambda (process output)
                                  (if (string= "@@\n" output)
                                       (setq org-mobile-modified-p nil)
                                     (setq org-mobile-modified-p t))))))

    (defun org-mobile-check-modified-local ()
      (let* ((buf (get-buffer-create "*hg-check*"))
             (proc (start-process-shell-command "local hg status" buf
                     "cd ~/org;hg status;echo '@@'")))
        (set-process-filter proc (lambda (process output)
                                   (if (string= "@@\n" output)
                                       (setq org-local-modified-p nil)
                                     (setq org-local-modified-p t))))))

   (defun org-mobile-check-modified-timer ()
      (run-at-time "10 min" nil (lambda ()
                                 (org-mobile-check-modified)
                                 (org-mobile-check-modified-local)
                                 (org-mobile-check-modified-timer))))

    (org-mobile-check-modified-timer)
#+end_src

** Org Crypt
#+begin_src emacs-lisp
(require 'epa-file)
(epa-file-enable)
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)
#+end_src

#+results:

** Orgxy
#+begin_src emacs-lisp
(setq org-icalendar-include-todo t)
(load (expand-file-name "~/Code/orgxy/Orgxy/orgxy.el"))
#+end_src



* "Mastering Emacs" tips
#+begin_src emacs-lisp
(setq reb-re-syntax 'string)

(require 'which-func)
(add-to-list 'which-func-modes 'org-mode)
(which-func-mode 1)

(define-key isearch-mode-map (kbd "C-o") 'isearch-occur)

#+end_src


* Foo
#+begin_src emacs-lisp
(require 'thingatpt)

(defun thing-at-point-goto-end-of-integer ()
  "Go to end of integer at point."
  (let ((inhibit-changing-match-data t))
    ;; Skip over optional sign
    (when (looking-at "[+-]")
      (forward-char 1))
    ;; Skip over digits
    (skip-chars-forward "[[:digit:]]")
    ;; Check for at least one digit
    (unless (looking-back "[[:digit:]]")
      (error "No integer here"))))

(put 'integer 'beginning-op 'thing-at-point-goto-end-of-integer)

(defun thing-at-point-goto-beginning-of-integer ()
  "Go to end of integer at point."
  (let ((inhibit-changing-match-data t))
    ;; Skip backward over digits
    (skip-chars-backward "[[:digit:]]")
    ;; Check for digits and optional sign
    (unless (looking-at "[+-]?[[:digit:]]")
      (error "No integer here"))
    ;; Skip backward over optional sign
    (when (looking-back "[+-]")
        (backward-char 1))))

(put 'integer 'beginning-op 'thing-at-point-goto-beginning-of-integer)

(defun thing-at-point-bounds-of-integer-at-point ()
  "Get boundaries of integer at point."
  (save-excursion
    (let (beg end)
      (thing-at-point-goto-beginning-of-integer)
      (setq beg (point))
      (thing-at-point-goto-end-of-integer)
      (setq end (point))
      (cons beg end))))

(put 'integer 'bounds-of-thing-at-point 'thing-at-point-bounds-of-integer-at-point)

(defun thing-at-point-integer-at-point ()
  "Get integer at point."
  (let ((bounds (bounds-of-thing-at-point 'integer)))
    (string-to-number (buffer-substring (car bounds) (cdr bounds)))))

(put 'integer 'thing-at-point 'thing-at-point-integer-at-point)

(defun increment-integer-at-point (&optional inc)
  "Increment integer at point by one.

With numeric prefix arg INC, increment the integer by INC amount."
  (interactive "p")
  (let ((inc (or inc 1))
        (n (thing-at-point 'integer))
        (bounds (bounds-of-thing-at-point 'integer)))
    (delete-region (car bounds) (cdr bounds))
    (insert (int-to-string (+ n inc)))))

(defun decrement-integer-at-point (&optional dec)
  "Decrement integer at point by one.

With numeric prefix arg DEC, decrement the integer by DEC amount."
  (interactive "p")
  (increment-integer-at-point (- (or dec 1))))
#+end_src
