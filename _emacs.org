* Environment
#+begin_src emacs-lisp
(cond ((and (string= window-system "ns")
            (fboundp 'aquamacs-homepage))
       (defvar which-emacs 'aquamacs))
      ((string= window-system "ns")
       (defvar which-emacs 'emacs-app))
      ((string= window-system "x")
       (defvar which-emacs 'x))
      ((string= window-system "w32")
       (defvar which-emacs 'w32))
      ((eq window-system nil)
       (defvar which-emacs 'tty)))

(require 'cl)

(setenv "TMPDIR" "/tmp")

(setq epg-gpg-program "/usr/local/bin/gpg")

(message "* Environment")
#+end_src

* UI
** Solarized
#+begin_src emacs-lisp
(set-frame-parameter nil 'background-mode 'dark)
(load-theme 'solarized t)
(message "* UI")
#+end_src
** Display
#+begin_src emacs-lisp
  (when (eq which-emacs 'emacs-app)
     (setq initial-frame-alist
           `((top . 22)
             (left . 0)
             (width . ,(- (floor (display-pixel-width) (frame-char-width)) 4))
             (height . ,(- (floor (- (display-pixel-height) 22) (frame-char-height)) 2))))

     (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
     (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (when (fboundp 'menu-bar-mode) (menu-bar-mode 1))

     (setq redisplay-dont-pause t)

     (setq ns-pop-up-frames nil))

  (when (eq which-emacs 'tty)
     (when (fboundp 'menu-bar-mode) (menu-bar-mode -1)))

  (column-number-mode 1)
  (size-indication-mode 1)
  (transient-mark-mode 1)


  (if (version< emacs-version "24.1")
      (setq tooltip-use-echo-area t) ; obsolete since 24.1
    (tooltip-mode -1))

  ;(setq visible-bell t)

  (setq minimap-window-location 'right)

(setq use-dialog-box nil)
(setq initial-scratch-message nil)


(blink-cursor-mode 0)
(setq x-stretch-cursor t)
(winner-mode 1)
(message "** Display")
#+end_src

** Fonts
#+begin_src emacs-lisp
  (require 'font-lock)
  (setq font-lock-maximum-decoration t)
  (global-font-lock-mode t)
(message "** Fonts")
#+end_src
** Keys
#+begin_src emacs-lisp
(when (eq which-emacs 'aquamacs)
  ; stop letting C-; switch meta to "Compose Character"
  (define-key osx-key-mode-map (kbd "C-;") '(lambda () (interactive)))
  ; stop letting A-q (Command-Q) kill aquamacs
  (define-key osx-key-mode-map (kbd "A-q") '(lambda () (interactive)))
  ; stop letting C-x C-c kill aquamacs
  (global-set-key (kbd "C-x C-c") '(lambda () (interactive)))
  ; use
  (global-set-key (kbd "<f12>") '(lambda () (interactive) (speedbar nil))))

(when (eq which-emacs 'emacs-app)
  ; stop letting s-q (Command-Q) kill emacs
  (global-set-key (kbd "s-q") '(lambda () (interactive))) ;[?\s-q]
  ; stop letting C-x C-c kill emacs
  (global-set-key (kbd "C-x C-c") '(lambda () (interactive))))

(setq next-line-add-newlines nil)

;; Make C-h a act as C-u C-h a
(setq apropos-do-all t)

;; For C-u C-x v d. Probably a good idea for everything else too
(setq completion-ignore-case t)

(setq backward-delete-char-untabify nil)

(defadvice kill-ring-save (before slickcopy activate compile)
  "When called interactively with no active region, copy
 a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(defadvice kill-region (before slickcut activate compile)
  "When called interactively with no active region, kill
 a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(defun kill-emacs-immediately ()
  (interactive)
  (let ((kill-emacs-hook nil))
    (if (yes-or-no-p "Kill emacs without running hooks?")
        (kill-emacs))))

(message "** Keys")
#+end_src

** Recentf
#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode t)

; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(message "** Recentf")
#+end_src

** IDO
#+begin_src emacs-lisp
;(ido-mode 'buffers) ; 'both
;(setq ido-everywhere nil) ;t
;(setq ido-max-directory-size 100000)
;(setq ido-create-new-buffer 'always)



;; get rid of `find-file-read-only' and replace it with something
;; more useful.
;(global-set-key (kbd "C-x C-r") 'ido-recentf-open)

;(defun ido-recentf-open ()
;  "Use `ido-completing-read' to \\[find-file] a recent file"
;  (interactive)
;  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
;      (message "Opening file...")
;    (message "Aborting")))
(message "** IDO")
#+end_src
** Helm
#+begin_src emacs-lisp
  ;(require 'recentf)

  ;(require 'helm-config)
  ;(helm-mode 1)
  ;(global-set-key (kbd "C-c h") 'helm-command-prefix)

  ;(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  ;(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  ;(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  ;(when (executable-find "curl")
  ;  (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t)


  ;(global-set-key (kbd "M-x") 'helm-M-x)
  ;(setq helm-M-x-fuzzy-match t)

  ;(global-set-key (kbd "C-x C-b") 'helm-mini)

  ;(setq helm-buffers-fuzzy-matching t
  ;      helm-recentf-fuzzy-match    t)

  ;(global-set-key (kbd "C-x C-f") 'helm-find-files)


;  (add-hook 'after-save-hook 'helm-backup-versioning)
(message "** Helm")
#+end_src

** Icomplete
#+begin_src emacs-lisp
(setq icomplete-mode t)
(message "** Icomplete")
#+end_src

** Minibuffer
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode)
(message "** Minibuffer")
#+end_src
** Eliminate Annoying Prompts and Messages
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq confirm-nonexistent-file-or-buffer nil)
  (setq kill-buffer-query-functions (remq 'process-kill-buffer-query-function kill-buffer-query-functions))
  (setq revert-without-query '(".*"))

  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)
  (eval-after-load "startup" '(fset 'display-startup-echo-area-message (lambda ())))

  (put 'narrow-to-region 'disabled nil)
(put 'not-modified 'disabled t)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

(message "** Eliminate Annoying Prompts and Messages")
#+end_src

** Helpers
#+begin_src emacs-lisp
(defun duckduckgo-search (text)
  "Search DuckDuckGo from Emacs."
  (interactive "sSearch: ")
  (browse-url
   (concat "https://duckduckgo.com/?q="
           (replace-regexp-in-string " " "+" text))))
(message "** Helpers")
#+end_src
* Files & Paths
#+begin_src emacs-lisp
  (push (expand-file-name "~/.emacs.d/src") load-path)

  (push (expand-file-name "/opt/local/bin") exec-path)
  (push (expand-file-name "~/bin") exec-path)

  (setenv "PATH" (reduce (lambda (a b)
                           (concat a ":" b))
                         `(,(expand-file-name "~/bin")
                           "/opt/local/bin"
                           ,(getenv "PATH"))))

  (filesets-init)

(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(setq file-name-coding-system 'utf-8)
(prefer-coding-system 'utf-8)



(message "* Files & Paths")
#+end_src
** Desktop
#+begin_src emacs-lisp
  (setq desktop-dirname "~/.emacs.d/")
  (desktop-save-mode 1)
  (setq desktop-save t)
(message "** Desktop")
#+end_src
** Packages
#+begin_src emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/"))

(package-initialize)
(message "** Packages")
#+end_src
** Trash
#+begin_src emacs-lisp
;(setq delete-by-moving-to-trash t)
;(setq system-trash-exclude-matches '("#[^/]+#$" ".*~$" "\\.emacs\\.desktop.*"))
;(setq system-trash-exclude-paths '("/tmp"))
;(setq trash-directory ????)
(message "** Trash")
#+end_src
** Dired
#+begin_src emacs-lisp
  (require 'dired-x)
  (require 'find-dired)
  (setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))
  (setq dired-use-ls-dired nil)
(message "** Dired")
#+end_src
** Version Backups
#+begin_src emacs-lisp
  (setq version-control t
        kept-new-versions 16
        kept-old-versions 0
        delete-old-versions t
        backup-by-copying-when-linked t
        backup-by-copying t
        backup-directory-alist '(("." . "~/.emacs.d/backups")))

  (defun force-backup-of-buffer ()
    (setq buffer-backed-up nil))

  (add-hook 'before-save-hook  'force-backup-of-buffer)

  ;; delete files not accessed in a week
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (dolist (file (directory-files "~/.emacs.d/backups" t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (fifth (file-attributes file))))
                    week))
        (delete-file file))))

  (setq vc-make-backup-files t)
(message "** Version Backups")
#+end_src

** Uniquify buffer names
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward)
  (setq uniquify-strip-common-suffix t)
  (setq uniquify-separator " ")
  (setq uniquify-trailing-separator-p t)
(message "** Uniquify buffer names")
#+end_src
** Customize
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file)
(message "** Customize")
#+end_src

** Auto commit
#+begin_src emacs-lisp
  ;;; Auto commit
  (make-variable-buffer-local 'auto-commit)
  (setq auto-commit nil)
  (push (cons 'auto-commit t) safe-local-variable-values)

  (defun vc-auto-commit ()
    (interactive)
    (when auto-commit
      (let ((file (buffer-file-name)))
        (unless (vc-registered file)
          (vc-register))
        (vc-checkin (list file) (vc-backend file) nil "Auto Commit"))))

  (add-hook 'after-save-hook (lambda () (vc-auto-commit)))

  ;; * 17 * * * (cd /Users/dfinster/Code/s/vhub/org; hg push)

  ;;; VC config
  (require 'vc)
  (setq vc-handled-backends '(Hg Git SVN))
(message "** Auto commit")
#+end_src

* Programming
** General
#+begin_src emacs-lisp
  (setq default-tab-width 8)
  (setq-default indent-tabs-mode nil)

  (defun delete-trailing-newlines ()
    (interactive)
    (save-restriction
      (widen)
      (save-excursion
        (if (and (> (point-max) (point-min))
                 (not find-file-literally))
            (while (or (= (char-after (1- (point-max))) ?\n)
                       (= (char-after (1- (point-max))) ?\r))
              (goto-char (point-max))
              (delete-backward-char 1))))))

  ;(add-hook 'before-save-hook
  ;          (lambda ()
  ;            (delete-trailing-whitespace)))

  (dolist (hook '(clojure-mode-hook
                  ;cider-repl-mode-hook
                  emacs-lisp-mode-hook
                  common-lisp-mode-hook
                  ;inferior-lisp-mode-hook
                  ;lisp-interaction-mode-hook
                  ;ielm-mode-hook
                  scheme-mode-hook))
    (add-hook hook
              (lambda ()
                (paredit-mode t))))

  ;(setq blink-matching-paren t)
  ;(setq blink-matching-paren-delay .3)

  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (setq show-paren-style 'parenthesis)

;; I don't want stuff like git to start a pager in shell-mode
(setenv "PAGER" "/bin/cat")

;;;;; Comint
(setq comint-buffer-maximum-size (expt 2 16))
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(dolist (mode '(c-mode
                java-mode
                cperl-mode
                html-mode-hook
                css-mode-hook 
                emacs-lisp-mode))
  (font-lock-add-keywords mode
                          '(("\\(XXX\\|FIXME\\|TODO\\)" 
                             1 font-lock-warning-face prepend))))




(message "* Programming")
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
(message "** Emacs Lisp")
#+end_src
** Common Lisp
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cl" . common-lisp-mode))

  (eval-after-load "slime"
    '(progn
      (add-to-list 'load-path "/Users/df/lib/slime")
      (slime-setup '(slime-fancy slime-banner))
      (setq slime-complete-symbol*-fancy t)
      (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
      (setq slime-net-coding-system 'utf-8-unix)))

  ;(setq inferior-lisp-program "/Users/df/lib/AllegroCL64-8/alisp")
  (setq inferior-lisp-program "/opt/local/bin/lisp") ; CMUCL
(message "** Common Lisp")
#+end_src

** Clojure
#+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.clj" . clojure-mode))
    ;(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    (setq cider-lein-command "/Users/df/bin/lein")

    (setq nrepl-log-messages t)
    (setq nrepl-hide-special-buffers nil)

    (setq cider-repl-result-prefix ";; => ")

    (setq cider-repl-wrap-history t)

    (setq cider-repl-history-size 10000)

    (setq cider-repl-history-file "~/.emacs.d/cider.history")

    (add-hook 'cider-repl-mode-hook 'subword-mode)

    (global-company-mode)

    ;(add-hook 'cider-repl-mode-hook 'company-mode)
    ;(add-hook 'cider-mode-hook 'company-mode)

    (setq *cider-stdout-height* 10)

    (defun cider-stdout ()
      (interactive)
      (let* ((repl-buffer (buffer-name (current-buffer)))
             (stdout-buffer (replace-regexp-in-string "\\*cider-repl \\([^*]+\\)\\*"
                                                      (if nrepl-hide-special-buffers 
                                                          " *nrepl-server \\1*"
                                                        "*nrepl-server \\1*")
                                                      repl-buffer)))
        (if (string-prefix-p "*cider-repl" repl-buffer)
            (let* ((windows (get-buffer-window-list stdout-buffer))
                   (stdout-window (or (and windows (first windows))
                                      (split-window-vertically)))) ; set current window to repl?
              (with-selected-window stdout-window
                (window-resize-no-error stdout-window (- (1+ *cider-stdout-height*) (window-size)))
                (switch-to-buffer stdout-buffer t t)
                (set (make-local-variable 'window-point-insertion-type) t)
                (goto-char (point-max))))
          (error "Current buffer must be the cider-repl to get stdout for."))))

    ;(add-hook 'cider-repl-mode-hook '(lambda () 
    ;                                   (cider-stdout)
    ;                                   (define-key cider-repl-mode-map (kbd "C-c C-M-o") 'cider-stdout)))
    
(message "** Clojure")
#+end_src
** Python
#+begin_src emacs-lisp
  (setq python-indent-offset 4)

  (defun untabify-whole-buffer ()
    (save-restriction
      (widen)
      (untabify (point-min) (point-max))))

  (add-hook 'before-save-hook
            (lambda ()
              (if (eq major-mode 'python-mode)
                  (untabify-whole-buffer))))

;  (add-hook 'python-mode-hook 'jedi:setup)
;  (setq jedi:complete-on-dot t)

  (message "** Python")
#+end_src

** Objective C
#+copied_from http://www.bretthutley.com/programming/emacs/integrating-emacs-and-xcode/
#+begin_src emacs-lisp
  (setq auto-mode-alist
       (cons '("\\.m$" . objc-mode) auto-mode-alist))
  (setq auto-mode-alist
      (cons '("\\.mm$" . objc-mode) auto-mode-alist))

  (setq auto-mode-alist
       (cons '("\\.h$" . bh-choose-header-mode) auto-mode-alist))

  (defun bh-choose-header-mode ()
    (interactive)
    (if (string-equal (substring (buffer-file-name) -2) ".h")
        (progn
          ;; OK, we got a .h file, if a .m file exists we'll assume it's
          ; an objective c file. Otherwise, we'll look for a .cpp file.
          (let ((dot-m-file (concat (substring (buffer-file-name) 0 -1) "m"))
                (dot-cpp-file (concat (substring (buffer-file-name) 0 -1) "cpp"))
                (dot-c-file (concat (substring (buffer-file-name) 0 -1) "c")))
            (cond ((file-exists-p dot-m-file)
                   (objc-mode))
                  ((file-exists-p dot-cpp-file)
                   (c++-mode))
                  ((file-exists-p dot-c-file)
                   (c-mode)))))))

  (add-hook 'find-file-hook 'bh-choose-header-mode)

  (defun bh-compile ()
    (interactive)
    (let ((df (directory-files "."))
          (has-proj-file nil))
      (while (and df (not has-proj-file))
        (let ((fn (car df)))
          (if (> (length fn) 10)
              (if (string-equal (substring fn -10) ".xcodeproj")
                  (setq has-proj-file t))))
        (setq df (cdr df)))
      (if has-proj-file
          (compile "xcodebuild -configuration Debug")
        (compile "make"))))

(message "** Objective C")
#+end_src

** JavaScript
#+begin_src emacs-lisp
  (push (expand-file-name "~/.emacs.d/src/js2-mode") load-path)
  (autoload 'js2-mode "js2-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(message "** JavaScript")
#+end_src

** HTML
#+begin_src emacs-lisp
  ; html-helper-mode sux, use xml-mode...
  (while (let ((e (rassoc 'html-helper-mode auto-mode-alist)))
           (when e
             (rplacd e 'xml-mode))))
(message "** HTML")
#+end_src

** Magit
#+begin_src emacs-lisp
  (require 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)

  (require 'git-gutter-fringe)
  (global-git-gutter-mode t)
  (setq git-gutter-fr:side 'left-fringe)

(set-face-foreground 'git-gutter-fr:modified "blue3")
(set-face-foreground 'git-gutter-fr:added    "yellow4")
(set-face-foreground 'git-gutter-fr:deleted  "red4")


; (fringe-helper-define 'git-gutter-fr:added nil
;   ".XXXXXX."
;   "XX....XX"
;   "X......X"
;   "X......X"
;   "XXXXXXXX"
;   "X......X"
;   "X......X")

; (fringe-helper-define 'git-gutter-fr:deleted nil
;   "XXXXX.."
;   "X....X."
;   "X.....X"
;   "X.....X"
;   "X.....X"
;   "X....X."
;   "XXXXX..")

; (fringe-helper-define 'git-gutter-fr:modified nil
;   "XXXXXXX"
;   "X..X..X"
;   "X..X..X"
;   "X..X..X"
;   "X..X..X"
;   "X..X..X"
;   "X..X..X")

;  (setq magit-last-seen-setup-instructions "1.4.0")

;(add-hook 'magit-status-sections-hook 'magit-insert-repo-header t)
(add-hook 'magit-status-sections-hook 'magit-insert-remote-header t)

            

(message "** Magit")
#+end_src
** Ediff
#+begin_src emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; only hilight current diff:
  ;(setq-default ediff-highlight-all-diffs 'nil)

  (add-hook 'ediff-load-hook
            (lambda ()
              (set-face-foreground ediff-current-diff-face-A "black")
              (set-face-background ediff-current-diff-face-A "#ffdddd")
              (set-face-foreground ediff-fine-diff-face-A "black")
              (set-face-background ediff-fine-diff-face-A "#ffdddd")
              (set-face-foreground ediff-even-diff-face-A "black")
              (set-face-background ediff-even-diff-face-A "grey40")
              (set-face-foreground ediff-odd-diff-face-A "black")
              (set-face-background ediff-odd-diff-face-A "grey60")

              (make-face-italic ediff-fine-diff-face-A)
              (make-face-italic ediff-fine-diff-face-B)
              (make-face-italic ediff-fine-diff-face-C)

              (set-face-foreground ediff-current-diff-face-B "yellow")
              (set-face-background ediff-current-diff-face-B "#ddffdd")
              (set-face-foreground ediff-fine-diff-face-B "yellow")
              (set-face-background ediff-fine-diff-face-B "#ddffdd")
              (set-face-foreground ediff-even-diff-face-B "yellow")
              (set-face-background ediff-even-diff-face-B "grey40")
              (set-face-foreground ediff-odd-diff-face-B "yellow")
              (set-face-background ediff-odd-diff-face-B "grey60")

              (set-face-foreground ediff-current-diff-face-C "white")
              (set-face-background ediff-current-diff-face-C "#ffffaa")
              (set-face-foreground ediff-fine-diff-face-C "white")
              (set-face-background ediff-fine-diff-face-C "#ffffaa")
              (set-face-foreground ediff-even-diff-face-C "white")
              (set-face-background ediff-even-diff-face-C "grey40")
              (set-face-foreground ediff-odd-diff-face-C "white")
              (set-face-background ediff-odd-diff-face-C "grey60")))

  ;; turn off whitespace checking:
  (setq ediff-diff-options "-w")

  (message "** Ediff")
#+end_src

** SQLi
#+begin_src emacs-lisp
;(require 'sql-connections (expand-file-name "~/.emacs.d/sql-connections.el.gpg"))

(setq sql-postgres-program "/opt/local/bin/psql")
(setq sql-mysql-program "/opt/local/lib/mysql55/bin/mysql")

(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))

(defun sql-comint-postgres (product options)
  "Create comint buffer and connect to Postgres."
  (let ((connection-string (concat "postgresql://"
                                   sql-user
                                   ":"
                                   sql-password
                                   "@"
                                   sql-server
                                   ":"
                                   (if (not (= 0 sql-port))
                                       (number-to-string sql-port))
                                   "/"
                                   sql-database)))
    (sql-comint product (append (list connection-string) options))))
(message "** SQLi")
#+end_src
** Tidy / Prettify Data
#+begin_src emacs-lisp
(defun tidyxml ()
  (interactive)
  (shell-command-on-region (point-min) (point-max) "xmllint --c14n - | XMLLINT_INDENT=$'\t' xmllint --format -" nil t))

(defun tidyjson ()
  (interactive)
  (shell-command-on-region (point-min) (point-max) "python -c 'import
  sys, json; print json.dumps(json.load(sys.stdin), sort_keys=True,
  indent=4)'" nil t))

(defun pretty-json ()
  (interactive)
  (tidyjson))

(defun pretty-xml ()
  (interactive)
  (tidyxml))
(message "** Tidy / Prettify Data")
#+end_src

** Dash
#+begin_src emacs-lisp
;  (global-set-key "\C-cD" 'dash-at-point)
;  (global-set-key "\C-cd" 'dash-at-point-with-docset)
;  (add-to-list 'dash-at-point-mode-alist '(perl-mode . "perl"))
(message "** Dash")
#+end_src

** Projectile
#+begin_src emacs-lisp
(projectile-global-mode)

(setq projectile-completion-system 'default)

  ;(setq projectile-switch-project-action 'helm-projectile)
  ;(setq projectile-completion-system 'helm)
  ;(helm-projectile-on)

;(global-set-key (kbd "C-c h") 'helm-projectile)

(message "** Projectile")
#+end_src


* Org Mode
** Setup
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))

(setq org-directory "~/org")
(setq org-log-done t)

(setq org-agenda-files '("~/org"))

(setq org-use-fast-todo-selection t)

(setq org-completion-use-ido t)

(defun gtd ()
   (interactive)
   (find-file "~/org/gtd.org"))
(message "* Org Mode")
#+end_src

** Keys
#+begin_src emacs-lisp
  (define-prefix-command 'org-custom-map)
  (global-unset-key (kbd "M-`"))
  (global-set-key (kbd "M-`") 'org-custom-map)
  (global-set-key (kbd "M-` a") 'org-agenda)
  (global-set-key (kbd "M-` b") 'org-iswitchb)
  (global-set-key (kbd "M-` c") 'org-capture)
  (global-set-key (kbd "M-` d") 'org-decrypt-entry)
  (global-set-key (kbd "M-` e") 'org-encrypt-entry)
;  (global-set-key (kbd "M-` g") 'org-mobile-pull)
  (global-set-key (kbd "M-` l") 'org-store-link)
;  (global-set-key (kbd "M-` p") 'org-mobile-push)
;  (global-set-key (kbd "M-` t") 'bh/org-todo)
;  (global-set-key (kbd "M-` w") 'bh/widen)

  ;; Clocking
  (define-prefix-command 'org-custom-clock-map)
  (global-set-key (kbd "M-` M-c") 'org-custom-map)
;  (global-set-key (kbd "M-` M-c i") 'bh/punch-in)
;  (global-set-key (kbd "M-` M-c o") 'bh/punch-out)
;  (global-set-key (kbd "M-` M-c SPC") 'bh/clock-in-last-task)
;  (global-set-key (kbd "M-` M-c g") 'org-clock-goto)
;  (global-set-key (kbd "M-` M-c n") 'org-clock-in)
(message "** Keys")
#+end_src

** Org Capture
#+begin_src emacs-lisp
;(define-key mode-specific-map [?a] 'org-agenda)

(setq org-default-notes-file "~/org/notes.org")
(define-key global-map "\C-cc" 'org-capture)

(setq org-capture-templates
      '(;("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
        ;     "* TODO %?\n  %i\n  \n%a\n%U\n")
        ("n" "Note" entry (file+datetree "~/org/notes.org")
             "* %?\nEntered on %U\n  %i\n  %a\n"
             :empty-lines 1)))

(custom-set-variables
 '(org-agenda-files (quote ("~/org/notes.org")))
 '(org-agenda-ndays 7)
 '(org-deadline-warning-days 14)
 '(org-agenda-show-all-dates t)
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-start-on-weekday nil)
 '(org-reverse-note-order t)
 '(org-fast-tag-selection-single-key (quote expert))
 '(org-agenda-custom-commands
   (quote (("d" todo "DELEGATED" nil)
           ("c" todo "DONE|DEFERRED|CANCELLED" nil)
           ("w" todo "WAITING" nil)
           ("W" agenda "" ((org-agenda-ndays 21)))
           ("A" agenda ""
            ((org-agenda-skip-function
              (lambda nil
                (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]")))
             (org-agenda-ndays 1)
             (org-agenda-overriding-header "Today's Priority #A tasks: ")))
           ("u" alltodo ""
            ((org-agenda-skip-function
              (lambda nil
                (org-agenda-skip-entry-if (quote scheduled) (quote deadline)
                                          (quote regexp) "\n]+>")))
             (org-agenda-overriding-header "Unscheduled TODO entries: ")))))))
(message "** Org Capture")
#+end_src

** Org Speed
#+begin_src emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("h" . hide-other)
                                      ("k" . org-kill-note-or-show-branches)
;                                      ("q" . bh/show-org-agenda)
                                      ("r" . org-reveal)
                                      ("s" . org-save-all-org-buffers)
                                      ("z" . org-add-note)
;                                      ("c" . self-insert-command)
;                                      ("C" . self-insert-command)
                                      ("J" . org-clock-goto))))

(message "** Org Speed")
#+end_src

** Org Babel
http://orgmode.org/worg/org-contrib/babel/intro.html
#+begin_src emacs-lisp
  (setq org-ditaa-jar-path "~/.emacs.d/src/java/ditaa.jar")
  (setq org-plantuml-jar-path "~/.emacs.d/src/java/plantuml.jar")

  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((emacs-lisp . t)
  ;;    (dot . t)
  ;;    (ditaa . t)
  ;;    (R . t)
  ;;    (python . t)
  ;;    (ruby . nil)
  ;;    (gnuplot . t)
  ;;    (clojure . t)
  ;;    (sql . t)
  ;;    (sh . t)
  ;;    (ledger . t)
  ;;    (org . t)
  ;;    (plantuml . t)
  ;;    (latex . t)))
  (message "** Org Babel")
#+end_src

** Org Protocol
#+begin_src emacs-lisp
; (setq server-socket-dir "/tmp/emacs501o")
  (server-start)
; (server-force-delete) to clear
  (require 'org-protocol)
(message "** Org Protocol")
#+end_src


** OrgMobile
#+begin_src emacs-lisp
  (setq org-mobile-inbox-for-pull "~/org/inbox.org")
  (setq org-mobile-directory "~/org/MobileOrg")
  (setq org-mobile-files '(org-agenda-files org-agenda-text-search-extra-files "~/org/"))
(message "** OrgMobile")
#+end_src
*** OrgMobile Mercurial
#+begin_src emacs-lisp
  ; add these lines into customize of mode-line-format
  ;(org-local-modified-p "|>")
  ;(org-mobile-modified-p "<|")

   (defadvice org-mobile-push (after mercurial-push last () activate)
     (interactive)
     (shell-command "cd ~/org;hg commit -m 'push';hg push")
     (org-mobile-check-modified-local))

   (defadvice org-mobile-pull (before mercurial-pull first () activate)
     (interactive)
     (shell-command "cd ~/org;hg pull;hg update"))

   (defadvice org-mobile-pull (after mercurial-pull-after last () activate)
     (interactive)
     (shell-command "cd ~/org;hg commit -m 'pull';hg push")
     (org-mobile-check-modified)
     (find-file "~/org/inbox.org"))

    (defvar org-mobile-modified-p nil)
    (defvar org-local-modified-p nil)

    (defun org-mobile-check-modified ()
      (let* ((buf (get-buffer-create "*hg-check*"))
             (proc (start-process-shell-command "ssh hg status" buf
                     "ssh -i ~/test.pem ubuntu@cloud-23.dyndns.org 'cd org;hg status';echo '@@'")))
        (set-process-filter proc (lambda (process output)
                                  (if (string= "@@\n" output)
                                       (setq org-mobile-modified-p nil)
                                     (setq org-mobile-modified-p t))))))

    (defun org-mobile-check-modified-local ()
      (let* ((buf (get-buffer-create "*hg-check*"))
             (proc (start-process-shell-command "local hg status" buf
                     "cd ~/org;hg status;echo '@@'")))
        (set-process-filter proc (lambda (process output)
                                   (if (string= "@@\n" output)
                                       (setq org-local-modified-p nil)
                                     (setq org-local-modified-p t))))))

   (defun org-mobile-check-modified-timer ()
      (run-at-time "10 min" nil (lambda ()
                                 (org-mobile-check-modified)
                                 (org-mobile-check-modified-local)
                                 (org-mobile-check-modified-timer))))

    (org-mobile-check-modified-timer)
(message "*** OrgMobile Mercurial")
#+end_src

** Org Crypt
#+begin_src emacs-lisp
(require 'epa-file)
(epa-file-enable)
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)
(message "** Org Crypt")
#+end_src

#+results:

** Orgxy
#+begin_src emacs-lisp
(setq org-icalendar-include-todo t)
;(load (expand-file-name "~/Code/orgxy/Orgxy/orgxy.el"))
(message "** Orgxy")
#+end_src



* "Mastering Emacs" 
#+begin_src emacs-lisp
(setq reb-re-syntax 'string)

(require 'which-func)
(add-to-list 'which-func-modes 'org-mode)
(which-func-mode 1)

(define-key isearch-mode-map (kbd "C-o") 'isearch-occur)

(message "* Mastering Emacs")
#+end_src


* Registers
#+begin_src emacs-lisp

(defun file-to-register (filename)
  (interactive "fFilename: ")
  (set-register (register-read-with-preview "Register: ")
                `(file . ,filename)))

(define-key ctl-x-r-map (kbd "C-f") 'file-to-register)
(define-key ctl-x-r-map (kbd "C-k") 'kmacro-to-register)

(setq register-preview-delay 0)
(message "* Registers")
#+end_src




* VirtualEnv
#+begin_src emacs-lisp
(setq python-environment-virtualenv '("/opt/local/bin/virtualenv-2.7" "--system-site-packages" "--quiet"))
(message "* VirtualEnv")
#+end_src

;; smartparens
;; floobits


* EMMS
  (require 'emms-setup)
  (emms-standard)
  (emms-default-players)

  (require 'emms-player-mpd)
  (setq emms-player-mpd-server-name "localhost")
  (setq emms-player-mpd-server-port "6600")
  ;(setq emms-player-mpd-server-password "mypassword")
  (add-to-list 'emms-info-functions 'emms-info-mpd)
  (add-to-list 'emms-player-list 'emms-player-mpd)
  (setq emms-player-mpd-music-directory (expand-file-name "~/Music/download"))

  (require 'emms-volume)
  (setq emms-volume-change-function 'emms-volume-mpd-change)

  (require 'emms-mode-line)
  (emms-mode-line 1)

  (require 'emms-playing-time)
  (emms-playing-time 1)

  (emms-playing-time-enable-display)

* Foo
#+begin_src emacs_lisp
(if (fboundp 'save-place-mode)
  (save-place-mode +1)
  (setq-default save-place t))

#+end_src

* Things to learn
C-u M-^
M-^
align-regexp
(defun bjm/align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)\\s-" 1 0 t))

align-to : prompt for char


(defun align-to-colon (begin end)
  "Align region to colon (:) signs"
  (interactive "r")
  (align-regexp begin end
                (rx (group (zero-or-more (syntax whitespace))) ":") 1 1 ))

(defun align-to-comma (begin end)
  "Align region to comma  signs"
  (interactive "r")
  (align-regexp begin end
                (rx "," (group (zero-or-more (syntax whitespace))) ) 1 1 ))


(defun align-to-equals (begin end)
  "Align region to equal signs"
  (interactive "r")
  (align-regexp begin end
                (rx (group (zero-or-more (syntax whitespace))) "=") 1 1 ))

(defun align-to-hash (begin end)
  "Align region to hash ( => ) signs"
  (interactive "r")
  (align-regexp begin end
                (rx (group (zero-or-more (syntax whitespace))) "=>") 1 1 ))
